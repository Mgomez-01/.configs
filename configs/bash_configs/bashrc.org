#+title: Emacs Configuration file in org mode
#+PROPERTY: header-args:bash :tangle ~/.bashrc
 
* Basic Setup
#+begin_src bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#+end_src

#+RESULTS:

* Custom Setups
** Z jumping
#+begin_src bash

# inject z into path variable for easy access of custom scripts
ADDIN=`pwd`"/repos/z"
if [ ` (echo $PATH) | grep repos/z` ] ;
then  echo "Z already in path.";
else export PATH=$PATH:$ADDIN;
fi


# inserts the z program and path for easy jumping. Must have z.sh in bin below. /mnt/c/Users/undrg/.local/bin/z.sh
ZPROG='. ~/repos/z/z.sh'

eval $ZPROG

#+end_src

#+RESULTS:
: Z already in path.

** Emacsclient
#+begin_src bash
  #start emacs daemon if not already running
  if ! emacsclient -e 0 >&/dev/null
     then emacs --daemon
  fi
#+end_src

** Adding custom Paths  
#+begin_src bash
MATLAB_PATH="/usr/local/MATLAB/R2023a/bin"
if [ ` (echo $PATH) | grep MATLAB` ] ;
then  echo "Matlab already in path.";
else export PATH=$PATH:$MATLAB_PATH;
fi

PRUSA_PATH="/home/speedy/PrusaSlicer/build/src" 
if [ ` (echo $PATH) | grep /home/speedy/PrusaSlicer/build/src` ] ;
then  echo "prusa already in path.";
else export PATH=$PATH:$PRUSA_PATH;
fi

RENDERDOC_PATH="/home/speedy/.local/bin/renderdoc_1.26/bin" 
if [ ` (echo $PATH) | grep /home/speedy/.local/bin/renderdoc_1.26/bin` ] ;
then  echo "renderdoc already present already in path.";
else export PATH=$PATH:$RENDERDOC_PATH;
fi

EXA_PATH="/home/speedy/exa/target/debug" 
if [ ` (echo $PATH) | grep /home/speedy/exa/target/debug` ] ;
then  echo "renderdoc already present already in path.";
else export PATH=$PATH:$EXA_PATH;
fi

ADS_PATH="/usr/local/ADS2023_Update2/bin:/usr/local/ADS2023_Update2/bin/Licensing/2023.02/bin" 
if [ ` (echo $PATH) | grep ADS` ] ;
then  echo "ADS already present already in path.";
else export PATH=$PATH:$ADS_PATH;
fi

#+end_src

#+RESULTS:
| Matlab    | already | in      | path.   |    |       |
| prusa     | already | in      | path.   |    |       |
| renderdoc | already | present | already | in | path. |
| renderdoc | already | present | already | in | path. |

** Starship stuff
#+begin_src bash
## starts up starship terminal prompt
eval "$(starship init bash)"
#+end_src


* Finalize Startup
** Start SSH agent
#+begin_src bash
    # set ssh agent for github stuff
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_ed25519
    clear
#+end_src

** Pokemon Stuff
#+begin_src bash
  # This is to wrap the function of Pokefetch to work a little smoother. The ability to provide the main path to images as an argument.
  # Assumes the user gives a directory that contains Pokemon/ as well as shiny/. Now you can curate your own selection to display instead of all of them. This has been moved to .bash_functions
  pokefetch()
  {

  POKEFETCH_PATH=$1
  NORMAL=`ls $POKEFETCH_PATH/Pokemon|shuf -n 1`
  SHINY=`ls $POKEFETCH_PATH/shiny|shuf -n 1`
     POKE=$( [ $(( RANDOM % (101) )) -gt $2 ] && echo $POKEFETCH_PATH/shiny/$SHINY || echo $POKEFETCH_PATH/Pokemon/$NORMAL)
     neofetch --jp2a $POKE --colors 10 12 0 12 15
     # add echo for debugging and use later to pinpoint errors in the returned image 
     #echo $NORMAL $SHINY


  }
#+end_src

** Figlet
#+begin_src bash

  
  #export FIGLET_FONTDIR="/home/speedy/figlet-fonts"
  # lol, this is a bit much, but whatever
  # Remember to change ~/Path/to/neofetch below to make this work as expected
  pokefetch ~/Pictures/neofetch 95
 
#+end_src

#+RESULTS:

** testing
#+begin_src bash
  # POKE=$( [ $(( RANDOM % (101) )) -gt 90 ] && echo ~/Pictures/neofetch/shiny_unknown/`ls ~/Pictures/neofetch/shiny_unknown|shuf -n 1` || echo ~/Pictures/neofetch/Unknown/`ls ~/Pictures/neofetch/Unknown|shuf -n 1`)
  #neofetch --jp2a $POKE  --colors 10 12 0 12 15
  #figlet -f Electronic -k -t  `echo $(basename $POKE) | sed -e 's/.*-\(.\)\..*/\1/'` 

  # POKEFETCH_PATH=~/Pictures/neofetch
   # POKE=$( [ $(( RANDOM % (101) )) -gt 95 ] && echo $POKEFETCH_PATH/shiny/`ls $POKEFETCH_PATH/shiny|shuf -n 1` || echo    $POKEFETCH_PATH/Pokemon/`ls $POKEFETCH_PATH/Pokemon|shuf -n 1`)
   # neofetch --jp2a $POKE --colors 10 12 0 12 15

   # # POKEFETCH_PATH=~/Pictures/neofetch
   # POKE=$( [ $(( RANDOM % (101) )) -gt 95 ] && echo $POKEFETCH_PATH/shiny_unknown/`ls $POKEFETCH_PATH/shiny_unknown|shuf -n 1` || echo    $POKEFETCH_PATH/Unknown/`ls $POKEFETCH_PATH/Unknown|shuf -n 1`)
   # neofetch --jp2a $POKE   --colors 10 12 0 12 15
   #figlet -k -t  "Welcome to your Home pc, Speedy!"  | lolcat

  # This makes the outputted picture the edward from FMA directory
  #neofetch --jp2a ~/Downloads/FMA/edward/`ls ~/Downloads/FMA/edward|shuf -n 1`
  #--colors 10 12 0 12 15


#+end_src
