#+title: Emacs Configuration file in org mode
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+latex_header: \mode<beamer>{\usetheme{Madrid}}

* TABLE OF CONTENTS :toc:
- [[#basic-configs][Basic Configs]]
  - [[#package-managers][Package Managers]]
  - [[#org-specific-changes][Org specific changes]]
  - [[#automatic-tangling-of-config][Automatic Tangling of config]]
  - [[#magit-git-client][Magit Git Client]]
  - [[#debugging][Debugging]]
- [[#visual-changes][Visual Changes]]
  - [[#new-theme-colors][New Theme colors]]
  - [[#emojis][Emojis]]
  - [[#fonts][Fonts]]
- [[#quality-of-life-changes][Quality of life changes]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#origami-mode][Origami Mode]]
  - [[#rainbow-mode-stuff][Rainbow mode stuff]]
  - [[#marginalia][Marginalia]]
  - [[#line-numbers-and-modes][Line numbers and modes]]
  - [[#which-key-mode][Which Key Mode]]
  - [[#various-changes][Various changes]]
  - [[#keybindings][Keybindings]]
  - [[#ssh][SSH]]
  - [[#elpy-mode][elpy mode]]
  - [[#docker-stuff][docker stuff]]
  - [[#visual-regex][Visual Regex]]
  - [[#directory-changes][Directory Changes]]
- [[#autocomplete-stuff][Autocomplete Stuff]]
  - [[#ac-package][AC package]]
  - [[#lsp][lsp]]
  - [[#yasyasnippet][YAS(yasnippet)]]
  - [[#pythonstuff][PythonStuff]]
  - [[#example-block-with-results-view-raw-to-see-org-text][Example block with results (View Raw to see org text)]]
- [[#platform-io][Platform-IO]]
- [[#gui-specific][GUI Specific]]
  - [[#exwm][EXWM]]

* Basic Configs
** Package Managers
This contains all package manager code
#+begin_src emacs-lisp
    ;; adding in package archives

    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))
  ;;(package-refresh-contents)
  (package-initialize)

    (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    (require 'use-package))


  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t)
  )

  (require 'package-utils)
#+end_src

#+RESULTS:
: t

** Org specific changes
Org specific modifications to allow for simpler entry in configs and other
files.
#+begin_src emacs-lisp
  (use-package org
    :ensure t)
  (require 'org)
  ;; Line below is to allow quick templates to work
  ;;Ex: <s <TAB> returns 
  ;;#+begin_src
  ;;
  ;;#+end_src


  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;;(add-to-list 'org-structure-template-alist '("comm" . "COMMENT"))
  (add-to-list 'org-structure-template-alist '("ml" . "src matlab :session *MATLAB* :results 
  output"))
  (add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python :session python3 :results output"))
  (add-to-list 'org-structure-template-alist '("b" . "src bash"))
  (add-to-list 'org-structure-template-alist '("sc" . "src C :session gcc :results output"))

  (use-package org-modern
    :ensure t)
  ;; set up org babel languages for code blocks
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (C           . t)
     (emacs-lisp  . t)
     (latex       . t)
     (matlab      . t)
     ;;(mathematica . t)
     (org         . t)
     (processing  . t)
     (python      . t)
     (jupyter     . t)
     (R           . t)
     (shell       . t)))
  (setq org-confirm-babel-evaluate nil)
  (setq org-support-shift-select t)

  (use-package org-superstar
    :ensure t)
  (require 'org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

  (add-to-list 'load-path "~/.emacs.d/org-superstar/")
  (setq org-toggle-inline-images t)
  (setq org-babel-C-compiler "/usr/bin/gcc")

  (setq org-babel-C++-compiler "/usr/bin/g++")
  (setq org-startup-with-inline-images t)


#+end_src

#+RESULTS:
: /usr/bin/g++
*** Org matlab
#+begin_src emacs-lisp
  (setq matlab-shell-command "/usr/local/MATLAB/R2023a/bin/matlab")
#+end_src
 
#+RESULTS:
: /usr/local/MATLAB/R2023a/bin/matlab
*** Org wolfram
#+begin_src emacs-lisp

#+end_src

** Automatic Tangling of config
Exactly as it sounds. Tangles the config to init.el for loading in at Emacs startup
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when 
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.configs/configs/Desktop_Emacs_config.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )
;;Tangles the bashrc to bashrc.org  
  (defun efs/org-babel-tangle-bashrc ()
    (when 
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.configs/configs/bash_configs/bashrc.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-bashrc)))
#+end_src

#+RESULTS:

** Magit Git Client
#+begin_src emacs-lisp
    (use-package magit
      :ensure t)
#+end_src

#+RESULTS:

** Debugging
#+begin_src emacs-lisp
  ;(setq debug-on-error t)

#+end_src

#+RESULTS:
: t


* Visual Changes
** New Theme colors
Load personal custom theme created for my setup and a hook for
fontify to give selection color if wanted(useful for customization
and setting up the theme).
#+begin_src emacs-lisp

  (defun my/load-theme-according-to-environment ()
      "Load a different theme based on the current environment (terminal or GUI)."
      (if (display-graphic-p)
	  ;; Load theme for GUI Emacs.
	  (load-theme 'tango-dark t)
	;; Load theme for terminal Emacs.
	(load-theme 'User_Dark t)))

    ;; Call the function to apply the theme.
    (my/load-theme-according-to-environment)

    ;; For emacsclient, add a hook to apply the theme every time a new frame is created.
    (add-hook 'after-make-frame-functions
	      (lambda (frame)
		(select-frame frame)
		(my/load-theme-according-to-environment)))



    ;;(load-theme 'User_Dark t)
    ;; add in some code to check if this is already in the .emacs.d folder.
    ;; if not, copy over from themes
    (add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src

#+RESULTS:
| info-colors-fontify-node |

** Emojis
#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
  (when (member "Segoe UI Emoji" (font-family-list))
    (set-fontset-font
   t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
#+end_src

#+RESULTS:

** Fonts
#+begin_src emacs-lisp
  (use-package ligature
    :load-path "path-to-ligature-repo"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode
			  '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
			    ;; =:= =!=
			    ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
			    ;; ;; ;;;
			    (";" (rx (+ ";")))
			    ;; && &&&
			    ("&" (rx (+ "&")))
			    ;; !! !!! !. !: !!. != !== !~
			    ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
			    ;; ?? ??? ?:  ?=  ?.
			    ("?" (rx (or ":" "=" "\." (+ "?"))))
			    ;; %% %%%
			    ("%" (rx (+ "%")))
			    ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
			    ;; |->>-||-<<-| |- |== ||=||
			    ;; |==>>==<<==<=>==//==/=!==:===>
			    ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
					    "-" "=" ))))
			    ;; \\ \\\ \/
			    ("\\" (rx (or "/" (+ "\\"))))
			    ;; ++ +++ ++++ +>
			    ("+" (rx (or ">" (+ "+"))))
			    ;; :: ::: :::: :> :< := :// ::=
			    (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
			    ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
			    ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
					    "="))))
			    ;; .. ... .... .= .- .? ..= ..<
			    ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
			    ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
			    ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
			    ;; *> */ *)  ** *** ****
			    ("*" (rx (or ">" "/" ")" (+ "*"))))
			    ;; www wwww
			    ("w" (rx (+ "w")))
			    ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
			    ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
			    ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
			    ;; << <<< <<<<
			    ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
					    "-"  "/" "|" "="))))
			    ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
			    ;; >> >>> >>>>
			    (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
			    ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
			    ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
					 (+ "#"))))
			    ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
			    ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
			    ;; __ ___ ____ _|_ __|____|_
			    ("_" (rx (+ (or "_" "|"))))
			    ;; Fira code: 0xFF 0x12
			    ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
			    ;; Fira code:
			    "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
			    ;; The few not covered by the regexps.
			    "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

#+RESULTS:
: t


* Quality of life changes
** Vertico
Vertico package for vertical buffer during completions
#+begin_src emacs-lisp
    (use-package vertico
      :ensure t
      :init
	(vertico-mode))
#+end_src

#+RESULTS:

** Orderless
A mod for Vertico to allow searching by any string instead of by starting string
#+begin_src emacs-lisp
      (use-package orderless
	:ensure t
	:init 
      (setq completion-styles '(orderless)))
#+end_src

#+RESULTS:

** Origami Mode
#+begin_src emacs-lisp
  (require 'origami)
  (global-origami-mode t)
#+end_src

#+RESULTS:
: t

** Rainbow mode stuff
Modifications for using rainbow delimiters. Makes navigating elisp code much easier
#+begin_src emacs-lisp
    (use-package rainbow-mode
      :ensure t)

    (require 'rainbow-mode)
    (rainbow-mode 1)

    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(highlight-changes ((t (:underline (:color foreground-color :style wave) :weight bold))))
     '(highlight-changes-delete ((t nil)))
     '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "blue"))))
     '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "yellow"))))
     '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "green"))))
     '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "white"))))
     '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "cyan"))))
     '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-mismatched-face ((t (:inherit rainbow-delimiters-base-face :foreground "red")))))
  (rainbow-mode t)

  (use-package rainbow-delimiters
    :ensure t)
  (require 'rainbow-delimiters)
  (rainbow-delimiters-mode 1)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  
#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

** Marginalia
A simple package that allows for a string of helpful text to be added alongside
the different commands that you can use in emacs.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t)
    (require 'marginalia)
    (marginalia-mode)
#+end_src

#+RESULTS:
: t
    
** Line numbers and modes
Adds in line numbers for the file using a relative position
#+begin_src emacs-lisp
  (require 'display-line-numbers)
    (global-display-line-numbers-mode 'relative)
    (menu-bar-display-line-numbers-mode 'relative)
    (global-visual-line-mode t)
#+end_src

#+RESULTS:
: t

** Which Key Mode
A helpful package that allows for a buffer to appear with hotkey commands for the
current mode.
#+begin_src emacs-lisp
    (use-package which-key
      :ensure t)
    (require 'which-key)
    (which-key-mode t)
#+end_src
~
#+RESULTS:
: t

** Various changes
Some simple quality of life things for me. 
#+begin_src emacs-lisp
  ;; get rid of unwanted pieces

  ;;(scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; set auto reload with auto revert 
  (auto-revert-mode 1)
  ;; set save place mode for all files
  (save-place-mode 1)
  ;; save history for all buffers
  (savehist-mode 1)

#+end_src

#+RESULTS:
: t

** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x <C-right>") 'next-multiframe-window)
  (global-set-key (kbd "C-x <C-left>") 'next-multiframe-window)
#+end_src

#+RESULTS:
: next-multiframe-window

** SSH
#+begin_src emacs-lisp
  (defun cade ()
    (interactive)
    (dired "/ssh:u1318856@lab1-13.eng.utah.edu:~/"))

  (defun docsServer ()
    (interactive)
    (dired "/ssh:root@160.238.36.160:/"))
  
#+end_src

#+RESULTS:
: docsServer

** elpy mode

#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
  
#+end_src

#+RESULTS:

** docker stuff
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src

#+RESULTS:
: ((\.ino$ . arduino-mode) (Dockerfile\' . dockerfile-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.dockerfile\' . dockerfile-mode) ([/\]\(?:Containerfile\|Dockerfile\)\(?:\.[^/\]*\)?\' . dockerfile-mode) (/git-rebase-todo\' . git-rebase-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** Visual Regex
#+begin_src emacs-lisp
  (require 'visual-regexp)
  (define-key global-map (kbd "C-c r") 'vr/replace)
  (define-key global-map (kbd "C-c q") 'vr/query-replace)
  ;; if you use multiple-cursors, this is for you:
  (define-key global-map (kbd "C-c m") 'vr/mc-mark)
#+end_src
** Directory Changes
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.backups/emacs-backups")))
#+end_src

#+RESULTS:
: vr/mc-mark


* Autocomplete Stuff
** AC package
ac package for autocompletion in various modes. still needs some work
#+begin_src emacs-lisp
    ;; start auto-complete package

    (eval-after-load "etags"
      '(progn
	  (ac-etags-setup)))


  (use-package auto-complete
    :ensure t)
  (custom-set-variables
   '(ac-etags-requires 1))
  (require 'auto-complete-config)
  (ac-config-default)
  (use-package auto-complete-clang)
  (setq ac-clang-flags
	(append '("-std=c++11")
		(mapcar (lambda (item) (concat "-I" item))
			(split-string
			 "
   /usr/include/c++/x.x
   /usr/include/x86_64-linux-gnu/c++/x.x
   /usr/include/c++/x.x/backward
   /usr/lib/gcc/x86_64-linux-gnu/x.x/include
   /usr/local/include
   /usr/include/x86_64-linux-gnu
   /usr/include
  "))))
  (setq ac-quick-help-delay 1)
  (defun my-ac-config ()
    (setq-default ac-sources '(ac-source-abbrev
			       ac-source-dictionary
			       ac-source-words-in-same-mode-buffers
			       ))
    (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
    (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
    (add-hook 'c-mode-common-hook 'my/c-mode-common-hook)
    (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
    (add-hook 'css-mode-hook 'ac-css-mode-setup)
    (add-hook 'auto-complete-mode-hook 'ac-common-setup)
    (global-auto-complete-mode t))
  (defun my-ac-cc-mode-setup ()
    (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
  (add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)
#+end_src

#+RESULTS:
| my-ac-cc-mode-setup | ac-cc-mode-setup |

** lsp
#+begin_src emacs-lisp
  (use-package lsp-ui)
#+end_src

#+RESULTS:
: lsp-ui

** YAS(yasnippet)
Yasnippet configuration for using snippets in code. Using in programming
mode since that is the most convenient.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (use-package yasnippet-snippets
    :ensure t)
  
  (require 'yasnippet)

    (add-to-list 'load-path
		 "~/.emacs.d/yasnippet")
    (add-to-list 'load-path
		 "~/.emacs.d/snippets")
    (yas/initialize)
    (yas-global-mode 1)
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
#+end_src

#+RESULTS:
| yas-minor-mode | rainbow-delimiters-mode |

** PythonStuff
#+begin_src emacs-lisp
  (setq elpy-modules (delq 'elpy-module-eldoc elpy-modules))

  (use-package jupyter
    :ensure t)
  (setq jupyter-command "/usr/bin/jupyter")

#+end_src

#+RESULTS:
: /usr/bin/jupyter

** Example block with results (View Raw to see org text)
Example of a block with results outputted. change keyword after
result to be any of the following:
*** Collection
- value
- output
*** Type
- table
- vector
- list
- scalar
- verbatim
- file
*** Format
- code
- drawer
- html
- latex
- link
- graphics
- org
- pp
- raw
*** Handling
- replace
- silent
- none
- append
- prepend

*** Example Block
#+begin_src C :results output
printf("Hello %s!!","world");
#+end_src



* Platform-IO
#+begin_src emacs-lisp
  ;; emacs-lisp
  (use-package irony-eldoc
    :ensure t)
  (use-package company-irony
    :ensure t) 
  (use-package platformio-mode
    :ensure t)
  ;; edit ino files with adruino mode. 
  (add-to-list 'auto-mode-alist '("\\.ino$" . arduino-mode)) 
  ;; Enable irony for all c++ files, and platformio-mode only
  ;; when needed (platformio.ini present in project root).
  (add-hook 'c++-mode-hook (lambda ()
			     (irony-mode)
			     (irony-eldoc)
			     (platformio-conditionally-enable)))

  (add-hook 'c-mode-hook (lambda ()
			     (irony-mode)
			     (irony-eldoc)
			     (platformio-conditionally-enable)))

  ;; Use irony's completion functions.
  (add-hook 'irony-mode-hook
	    (lambda ()
	      (define-key irony-mode-map [remap completion-at-point]
		'irony-completion-at-point-async)

	      (define-key irony-mode-map [remap complete-symbol]
		'irony-completion-at-point-async)

	      (irony-cdb-autosetup-compile-options)))
#+end_src

#+RESULTS:
| lambda | nil | (define-key irony-mode-map [remap completion-at-point] 'irony-completion-at-point-async) | (define-key irony-mode-map [remap complete-symbol] 'irony-completion-at-point-async) | (irony-cdb-autosetup-compile-options) |


* GUI Specific
** EXWM
Window manager for emacs. May be useful for tiling and controlling from
keyboard alone. Still need some changes on system to get it working with
WSL properly.
*** Next steps
  - Need to set up displays. currently does not load
    correctly and spans over all screens.
  - Need to find a method of partitioning the screens
    into their own respective areas.
  - look into randr for detecting and configuring the
    displays. 
#+begin_src emacs-lisp
  (use-package exwm
    :ensure t)
 ;; (require 'exwm)
 ;; (require 'exwm-config)
 ;; (exwm-config-example)
#+end_src

#+RESULTS:









