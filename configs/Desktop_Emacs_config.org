#+title: Emacs Configuration file in org mode
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+latex_header: \mode<beamer>{\usetheme{Madrid}}

* TABLE OF CONTENTS                                                     :toc:
- [[#basic-configs][Basic Configs]]
  - [[#package-managers][Package Managers]]
  - [[#org-specific-changes][Org specific changes]]
  - [[#automatic-tangling-of-config][Automatic Tangling of config]]
  - [[#magit-git-client][Magit Git Client]]
  - [[#debugging][Debugging]]
- [[#visual-changes][Visual Changes]]
  - [[#new-theme-colors][New Theme colors]]
  - [[#emojis][Emojis]]
  - [[#fonts][Fonts]]
- [[#quality-of-life-changes][Quality of life changes]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#origami-mode][Origami Mode]]
  - [[#rainbow-mode-stuff][Rainbow mode stuff]]
  - [[#marginalia][Marginalia]]
  - [[#line-numbers-and-modes][Line numbers and modes]]
  - [[#which-key-mode][Which Key Mode]]
  - [[#various-changes][Various changes]]
  - [[#keybindings][Keybindings]]
  - [[#ssh][SSH]]
  - [[#elpy-mode][elpy mode]]
  - [[#docker-stuff][docker stuff]]
  - [[#visual-regex][Visual Regex]]
  - [[#directory-changes][Directory Changes]]
- [[#autocomplete-stuff][Autocomplete Stuff]]
  - [[#ac-package][AC package]]
  - [[#lsp][lsp]]
  - [[#yasyasnippet][YAS(yasnippet)]]
  - [[#pythonstuff][PythonStuff]]
  - [[#example-block-with-results-view-raw-to-see-org-text][Example block with results (View Raw to see org text)]]
- [[#platform-io][Platform-IO]]
- [[#gui-specific][GUI Specific]]
  - [[#exwm][EXWM]]

* Basic Configs

** Package Managers
This contains all package manager code
#+begin_src emacs-lisp
    ;; adding in package archives

    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))
  ;;(package-refresh-contents)
  (package-initialize)

    (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    (require 'use-package))


  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t)
  )

  (require 'package-utils)
#+end_src


** Org specific changes
Org specific modifications to allow for simpler entry in configs and other
files.

* Org main with latex
#+begin_src emacs-lisp
(use-package org
  :defer t
  :config
  ;; Your org mode configuration
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("ml" . "src matlab :session *MATLAB* :results output"))
  (add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python :session python3 :results output"))
  (add-to-list 'org-structure-template-alist '("b" . "src bash"))
  (add-to-list 'org-structure-template-alist '("sc" . "src C :session gcc :results output"))
  
  ;; Org-Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C           . t)
     (emacs-lisp  . t)
     (latex       . t)
     (matlab      . t)
     (org         . t)
     (processing  . t)
     (python      . t)
     (jupyter     . t)
     (R           . t)
     (shell       . t)))
  
  (setq org-confirm-babel-evaluate nil)
  (setq org-support-shift-select t)
  
  ;; Org LaTeX settings
  (setq org-latex-packages-alist
        '(("T1" "fontenc" t)
          ("" "titling" t)
          ("" "url" t)
          ("" "amsmath,amsthm,amssymb" t)))
  
  (with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("exam"
                 "\\documentclass[a4paper, 11pt]{exam}"
                 ;; Add more custom settings here
                 )))  
  ;; More Org settings
  (setq org-toggle-inline-images t)
  (setq org-babel-C-compiler "/usr/bin/gcc")
  (setq org-babel-C++-compiler "/usr/bin/g++")
  (setq org-startup-with-inline-images t)
  )

(use-package texfrag
  :defer t
  :config
  ;; Texfrag settings
  (define-key texfrag-mode-map (kbd "C-c C-x C-l") 'texfrag-show-fragments)
  (define-key texfrag-mode-map (kbd "C-c C-x C-k") 'texfrag-clear-fragments)
)

;; Function to update Org date on save
(defun update-org-date-on-save ()
  "Update the #+DATE: line in an Org file when it is saved."
  (when (eq major-mode 'org-mode)
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^#\\+DATE:.*$" nil t)
        (replace-match (concat "#+DATE: " (format-time-string "%Y-%m-%d %H:%M:%S")))))))

(add-hook 'before-save-hook 'update-org-date-on-save)

;; Other packages and settings
(use-package org-modern :ensure t)
(use-package org-superstar :ensure t)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
(add-to-list 'load-path "~/.emacs.d/org-superstar/")

#+end_src

** matlab
#+begin_src emacs-lisp
    (setq matlab-shell-command "/usr/local/MATLAB/R2023a/bin/matlab")
   (require 'matlab)
     (add-hook 'matlab-mode-hook
   	    (lambda ()
   	      (define-key matlab-mode-map (kbd "M-<up>") 'elpy-nav-move-line-or-region-up)
   	      (define-key matlab-mode-map (kbd "M-<down>") 'elpy-nav-move-line-or-region-down)))
#+end_src
 
*** Org wolfram
#+begin_src emacs-lisp
#+end_src


** Automatic Tangling of config
Exactly as it sounds. Tangles the config to init.el for loading in at Emacs startup
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.configs/configs/Desktop_Emacs_config.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )
  ;;Tangles the bashrc to bashrc.org
  (defun efs/org-babel-tangle-bashrc ()
    (when
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.configs/configs/bash_configs/bashrc.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-bashrc)
			     ))

  (add-hook 'org-mode-hook (lambda ()
			    (define-key org-mode-map (kbd "M-<up>") 'elpy-nav-move-line-or-region-up)
			    (define-key org-mode-map (kbd "M-<down>") 'elpy-nav-move-line-or-region-down)))
#+end_src

** Magit Git Client
#+begin_src emacs-lisp
    (use-package magit
      :ensure t)
#+end_src

** Debugging
#+begin_src emacs-lisp
  ;(setq debug-on-error t)

#+end_src


* Visual Changes
** New Theme colors
Load personal custom theme created for my setup and a hook for
fontify to give selection color if wanted(useful for customization
and setting up the theme).
#+begin_src emacs-lisp

    (defun my/load-theme-according-to-environment ()
	"Load a different theme based on the current environment (terminal or GUI)."
	(if (display-graphic-p)
	    ;; Load theme for GUI Emacs.
	    (progn
	      (load-theme 'tango-dark t)
	     (set-frame-parameter (selected-frame) 'alpha '(85 80))
	     (add-to-list 'default-frame-alist '(alpha 85 80)))
	  ;; Load theme for terminal Emacs.
	  (load-theme 'User_Dark t)))

      ;; Call the function to apply the theme.
      (my/load-theme-according-to-environment)

      ;; For emacsclient, add a hook to apply the theme every time a new frame is created.
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (select-frame frame)
		  (my/load-theme-according-to-environment)))



      ;;(load-theme 'User_Dark t)
      ;; add in some code to check if this is already in the .emacs.d folder.
      ;; if not, copy over from themes
      (add-hook 'Info-selection-hook 'info-colors-fontify-node)

    (beacon-mode t)

    (use-package all-the-icons :ensure t)
  (use-package neotree
  :ensure t
  :bind (("s-x" . neotree-toggle))
  :config
  (setq neo-theme 'icons)
  (setq neo-smart-open t))


#+end_src


** Emojis
#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
  (when (member "Segoe UI Emoji" (font-family-list))
    (set-fontset-font
   t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
#+end_src


** Fonts
#+begin_src emacs-lisp
  (use-package ligature
    :load-path "path-to-ligature-repo"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode
			  '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
			    ;; =:= =!=
			    ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
			    ;; ;; ;;;
			    (";" (rx (+ ";")))
			    ;; && &&&
			    ("&" (rx (+ "&")))
			    ;; !! !!! !. !: !!. != !== !~
			    ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
			    ;; ?? ??? ?:  ?=  ?.
			    ("?" (rx (or ":" "=" "\." (+ "?"))))
			    ;; %% %%%
			    ("%" (rx (+ "%")))
			    ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
			    ;; |->>-||-<<-| |- |== ||=||
			    ;; |==>>==<<==<=>==//==/=!==:===>
			    ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
					    "-" "=" ))))
			    ;; \\ \\\ \/
			    ("\\" (rx (or "/" (+ "\\"))))
			    ;; ++ +++ ++++ +>
			    ("+" (rx (or ">" (+ "+"))))
			    ;; :: ::: :::: :> :< := :// ::=
			    (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
			    ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
			    ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
					    "="))))
			    ;; .. ... .... .= .- .? ..= ..<
			    ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
			    ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
			    ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
			    ;; *> */ *)  ** *** ****
			    ("*" (rx (or ">" "/" ")" (+ "*"))))
			    ;; www wwww
			    ("w" (rx (+ "w")))
			    ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
			    ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
			    ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
			    ;; << <<< <<<<
			    ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
					    "-"  "/" "|" "="))))
			    ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
			    ;; >> >>> >>>>
			    (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
			    ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
			    ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
					 (+ "#"))))
			    ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
			    ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
			    ;; __ ___ ____ _|_ __|____|_
			    ("_" (rx (+ (or "_" "|"))))
			    ;; Fira code: 0xFF 0x12
			    ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
			    ;; Fira code:
			    "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
			    ;; The few not covered by the regexps.
			    "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src


* Quality of life changes
** Vertico and consult
Vertico package for vertical buffer during completions
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
      (vertico-mode))
  (use-package consult
    :ensure t) 
#+end_src


** Orderless
A mod for Vertico to allow searching by any string instead of by starting string
#+begin_src emacs-lisp
      (use-package orderless
	:ensure t
	:init 
      (setq completion-styles '(orderless)))
#+end_src


** Origami Mode
#+begin_src emacs-lisp
  (require 'origami)
  (global-origami-mode t)
  (global-set-key (kbd "M-]") 'origami-close-node)
  (global-set-key (kbd "M-[") 'origami-open-node)
#+end_src


** Rainbow mode stuff
Modifications for using rainbow delimiters. Makes navigating elisp code much easier
#+begin_src emacs-lisp
    (use-package rainbow-mode
      :ensure t)

    (require 'rainbow-mode)
    (rainbow-mode 1)

    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(highlight-changes ((t (:underline (:color foreground-color :style wave) :weight bold))))
     '(highlight-changes-delete ((t nil)))
     '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "blue"))))
     '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "yellow"))))
     '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "green"))))
     '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "white"))))
     '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "cyan"))))
     '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-mismatched-face ((t (:inherit rainbow-delimiters-base-face :foreground "red")))))
  (rainbow-mode t)

  (use-package rainbow-delimiters
    :ensure t)
  (require 'rainbow-delimiters)
  (rainbow-delimiters-mode 1)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  
#+end_src


** Marginalia
A simple package that allows for a string of helpful text to be added alongside
the different commands that you can use in emacs.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t)
    (require 'marginalia)
    (marginalia-mode)
#+end_src

    
** Line numbers and modes
Adds in line numbers for the file using a relative position
#+begin_src emacs-lisp
  (require 'display-line-numbers)
    (global-display-line-numbers-mode 'relative)
    (menu-bar-display-line-numbers-mode 'relative)
    (global-visual-line-mode t)
#+end_src


** Which Key Mode
A helpful package that allows for a buffer to appear with hotkey commands for the
current mode.
#+begin_src emacs-lisp
    (use-package which-key
      :ensure t)
    (require 'which-key)
    (which-key-mode t)
#+end_src


** Various changes
Some simple quality of life things for me. 
#+begin_src emacs-lisp
  ;; get rid of unwanted pieces

  ;;(scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setenv "DISPLAY" ":0")
  ;; set auto reload with auto revert 
  (auto-revert-mode 1)
  ;; set save place mode for all files
  (save-place-mode 1)
  ;; save history for all buffers
  (savehist-mode 1)

#+end_src


** Auctex stuff
#+begin_src emacs-lisp
    (use-package tex
      :ensure auctex
      :hook (LaTeX-mode . turn-on-reftex)
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (setq reftex-plug-into-AUCTeX t)
      (add-hook 'LaTeX-mode-hook 'visual-line-mode)
      (add-hook 'LaTeX-mode-hook 'flyspell-mode)
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t)
      (TeX-global-PDF-mode t) ;; PDF mode enable, not plain
      (setq TeX-source-correlate-method 'synctex)
      (setq TeX-source-correlate-start-server t)
      ;; Add keybindings
      (add-hook 'LaTeX-mode-hook
		(lambda ()
		  (define-key LaTeX-mode-map (kbd "C-c C-g") 'quick-xelatex)
		  (define-key LaTeX-mode-map (kbd "C-c C-f") 'finalize-xelatex)
		  (define-key LaTeX-mode-map (kbd "M-<up>") 'elpy-nav-move-line-or-region-up)
		  (define-key LaTeX-mode-map (kbd "M-<down>") 'elpy-nav-move-line-or-region-down)))
  )



#+end_src


** LaTeX stuff
version without the debugging
  "Run xelatex on main.tex whenever a TeX file is saved."
  (when (string-match "\\.tex\\'" buffer-file-name)
    (let* ((bufname (format "*xelatex-%s*" (file-name-nondirectory buffer-file-name)))
           (proc (get-buffer-process bufname)))
      (when proc
        (delete-process proc))
      (start-process "xelatex" bufname "xelatex" "main.tex"))))
#+begin_src emacs-lisp
  (defun run-xelatex-on-save ()
    "Run xelatex on main.tex whenever a TeX file is saved."
    (message "Checking if hook should run...")  ; Debug message
    (when (string-match "\\.tex\\'" buffer-file-name)
      (message "Running xelatex...")  ; Debug message
      (let* ((bufname (format "*xelatex-%s*" (file-name-nondirectory buffer-file-name)))
	     (proc (get-buffer-process bufname)))
	(when proc
	  (message "Terminating existing xelatex process...")  ; Debug message
	  (delete-process proc))
	(message "Starting new xelatex process...")  ; Debug message
	(start-process "xelatex" bufname "xelatex" "main.tex")
	(message "xelatex process started."))))  ; Debug message

  (defun quick-xelatex ()
    "Quickly run XeLaTeX to update the PDF."
    (interactive)
    (TeX-command "LaTeX" 'TeX-master-file -1))

  (defun finalize-xelatex ()
    "Run XeLaTeX, BibTeX, and XeLaTeX twice more to finalize the document."
    (interactive)
    (let ((master (TeX-master-file)))
      (TeX-save-document master)
      (TeX-command-sequence '("LaTeX" "BibTeX" "LaTeX" "LaTeX") t)))

  ;; (add-hook 'TeX-mode-hook
  ;; 	  (lambda ()
  ;; 	    (define-key LaTeX-mode-map (kbd "C-c C-g") 'quick-xelatex)
  ;; 	    (define-key LaTeX-mode-map (kbd "C-c C-f") 'finalize-xelatex)))

  (add-hook 'LaTeX-mode-hook
	    (lambda ()
	      (add-hook 'after-save-hook 'run-xelatex-on-save nil 'make-it-local)))
#+end_src


** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x <C-right>") 'next-multiframe-window)
  (global-set-key (kbd "C-x <C-left>") 'next-multiframe-window)
  (global-set-key (kbd "M-o <C-right>") 'exwm-layout-enlarge-window-horizontally)
  (global-set-key (kbd "M-o <C-left>") 'exwm-layout-shrink-window-horizontally)
#+end_src


** SSH
#+begin_src emacs-lisp
  (defun cade ()
    (interactive)
    (dired "/ssh:u1318856@lab1-13.eng.utah.edu:~/"))
  (defun emulab ()
    (interactive)
    (dired "/ssh:mgomez@pc14-fort.emulab.net:~/"))
  (defun lab-feko ()
    (interactive)
    (dired "/ssh:mgomez@pc12-fort.emulab.net:~/"))
  (defun docsServer ()
    (interactive)
    (dired "/ssh:root@160.238.36.160:/"))
#+end_src


** elpy mode

#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
  
#+end_src

** cmake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t)
#+end_src


** docker stuff
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src

** Visual Regex
#+begin_src emacs-lisp
  (require 'visual-regexp)
  (define-key global-map (kbd "C-c r") 'vr/replace)
  (define-key global-map (kbd "C-c q") 'vr/query-replace)
  ;; if you use multiple-cursors, this is for you:
  (define-key global-map (kbd "C-c m") 'vr/mc-mark)
#+end_src


** Directory Changes
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.backups/emacs-backups")))
  (setq auto-save-file-name-transforms
	`((".*" "~/.backups/emacs-backups" t)))

#+end_src

* Autocomplete Stuff
** AC package
ac package for autocompletion in various modes. still needs some work
#+begin_src emacs-lisp
  ;; start auto-complete package

  (eval-after-load "etags"
    '(progn
       (ac-etags-setup)))


  (use-package auto-complete
    :ensure t)
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(ac-etags-requires 1)
   '(custom-safe-themes
     '("af5e14845791d2baaa7ccdf455850527b963a991fa3e7a101ebf280645f30cc2" default))
   '(dir-treeview-show-in-side-window t))
  (require 'auto-complete-config)
  (ac-config-default)
  (use-package auto-complete-clang)
  (setq ac-clang-flags
	(append '("-std=c++11")
		(mapcar (lambda (item) (concat "-I" item))
			(split-string
			 "
     /usr/include/c++/x.x
     /usr/include/x86_64-linux-gnu/c++/x.x
     /usr/include/c++/x.x/backward
     /usr/lib/gcc/x86_64-linux-gnu/x.x/include
     /usr/local/include
     /usr/include/x86_64-linux-gnu
     /usr/include
    "))))
  (setq ac-quick-help-delay 1)
  (defun my-ac-config ()
    (setq-default ac-sources '(ac-source-abbrev
			       ac-source-dictionary
			       ac-source-words-in-same-mode-buffers
			       ))
    (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
    (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
    (add-hook 'c-mode-common-hook 'my/c-mode-common-hook)
    (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
    (add-hook 'css-mode-hook 'ac-css-mode-setup)
    (add-hook 'auto-complete-mode-hook 'ac-common-setup)
    (global-auto-complete-mode t))
  (defun my-ac-cc-mode-setup ()
    (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
  (add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)
#+end_src


** lsp
#+begin_src emacs-lisp
  (use-package lsp-ui)
#+end_src


** YAS(yasnippet)
Yasnippet configuration for using snippets in code. Using in programming
mode since that is the most convenient.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (use-package yasnippet-snippets
    :ensure t)

  (require 'yasnippet)

  (add-to-list 'load-path
	       "~/.emacs.d/yasnippet")
  (add-to-list 'load-path
	       "~/.emacs.d/snippets")
  (yas/initialize)
  (yas-global-mode 1)
  (yas-reload-all)
  (add-hook 'prog-mode-hook #'yas-minor-mode)
  (global-set-key (kbd "C-c y d") 'yas-describe-tables)
#+end_src


** multi-cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t)
  (require 'multiple-cursors)

  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

** elpy mode
# passibly add into the desktop version
# ** elpy mode
# #+begin_src emacs-lisp
#   (use-package elpy
#     :ensure t
#     :init
#     (elpy-enable))
#     (require 'elpy)
#   (setq elpy-modules (delq 'elpy-module-eldoc elpy-modules))

# #+end_src


** PythonStuff
#+begin_src emacs-lisp
  (setq elpy-modules (delq 'elpy-module-eldoc elpy-modules))

  (use-package jupyter
    :ensure t)
  (setq jupyter-command "/usr/bin/jupyter")

#+end_src

** Example block with results (View Raw to see org text)
Example of a block with results outputted. change keyword after
result to be any of the following:
*** Collection
- value
- output
*** Type
- table
- vector
- list
- scalar
- verbatim
- file
*** Format
- code
- drawer
- html
- latex
- link
- graphics
- org
- pp
- raw
*** Handling
- replace
- silent
- none
- append
- prepend

*** Example Block
#+begin_src C :results output
printf("Hello %s!!","world");
#+end_src



* Platform-IO
#+begin_src emacs-lisp
  ;; emacs-lisp
  (use-package irony-eldoc
    :ensure t)
  (use-package company-irony
    :ensure t) 
  (use-package platformio-mode
    :ensure t)
  ;; edit ino files with adruino mode. 
  (add-to-list 'auto-mode-alist '("\\.ino$" . arduino-mode)) 
  ;; Enable irony for all c++ files, and platformio-mode only
  ;; when needed (platformio.ini present in project root).
  (add-hook 'c++-mode-hook (lambda ()
			     (irony-mode)
			     (irony-eldoc)
			     (platformio-conditionally-enable)))

  (add-hook 'c-mode-hook (lambda ()
			     (irony-mode)
			     (irony-eldoc)
			     (platformio-conditionally-enable)
			     (define-key c-mode-map (kbd "M-<up>") 'elpy-nav-move-line-or-region-up)
			     (define-key c-mode-map (kbd "M-<down>") 'elpy-nav-move-line-or-region-down)))
  ;; Use irony's completion functions.
  (add-hook 'irony-mode-hook
	    (lambda ()
	      (define-key irony-mode-map [remap completion-at-point]
		'irony-completion-at-point-async)

	      (define-key irony-mode-map [remap complete-symbol]
		'irony-completion-at-point-async)

	      (irony-cdb-autosetup-compile-options)))
    (add-hook 'cc-mode-hook (lambda ()
			    (define-key cc-mode-map (kbd "M-<up>") 'elpy-nav-move-line-or-region-up)
			    (define-key cc-mode-map (kbd "M-<down>") 'elpy-nav-move-line-or-region-down)))

#+end_src


** custom modes
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/.custom/")
  (load "cnf-mode.el")
  (add-to-list 'auto-mode-alist '("\\.cnf\\'" . cnf-mode))  
  (load "blif-mode.el")
  (add-to-list 'auto-mode-alist '("\\.blif\\'" . blif-mode))
  (load "feko-mode.el")
  (add-to-list 'auto-mode-alist '("\\.sing\\'" . singular-mode))
  (load "singular-mode.el")
  
#+end_src

#+RESULTS:
: t

* GUI Specific
** EXWM
Window manager for emacs. May be useful for tiling and controlling from
keyboard alone. Still need some changes on system to get it working with
WSL properly.
*** Next steps
  - Need to set up displays. currently does not load
    correctly and spans over all screens.
  - Need to find a method of partitioning the screens
    into their own respective areas.
  - look into randr for detecting and configuring the
    displays. 
#+begin_src emacs-lisp
  (use-package exwm
    :ensure t)
 ;; (require 'exwm)
 ;; (require 'exwm-config)
 ;; (exwm-config-example)
#+end_src

** exec-path
#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)) 
#+end_src
