#+title: Emacs Configuration file in org mode
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Basic Configs
** Package Managers
This contains all package manager code
#+begin_src emacs-lisp

  ;; adding in package archives
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  ;;(package-refresh-contents)

  (eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (require 'use-package))
#+end_src

** COMMENT Org specific changes
Org specific modifications to allow for simpler entry in configs and other
files.
#+begin_src emacs-lisp
  (use-package org
    :ensure t)
  (require 'org)
  ;; Line below is to allow quick templates to work.
  ;;Ex: <s <TAB> returns 
  ;;#+begin_src
  ;;
  ;;#+end_src

  (setq org-startup-with-inline-images t)
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("comm" . "COMMENT"))

  (use-package org-modern
    :ensure t)
  ;; set up org babel languages for code blocks
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (C          . t)
       (emacs-lisp . t)
       (latex      . t)
       (matlab     . t)
       (org        . t)
       (processing . t)
       (python     . t)
       (R          . t)
       (shell      . t)))
    (setq org-confirm-babel-evaluate nil)
    (setq org-support-shift-select t)
 
  (use-package org-superstar
    :ensure t)
    (require 'org-superstar)
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

    (add-to-list 'load-path "~/.emacs.d/org-superstar/")
#+end_src

** Automatic Tangling of config
Exactly as it sounds. Tangles the config to init.el for loading in at Emacs startup
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when
	(string-equal
	 (buffer-file-name)
	 ; Laptop version (expand-file-name "~/Emacs_config.org"))
	 (expand-file-name "/mnt/c/Users/undrg/OneDrive - University of Utah/.emacs_stuff/configs/Emacs_config.org")); for desktop. Once the final version is done, the laptop version will be the only version 
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Magit Git Client
#+begin_src emacs-lisp
    (use-package magit
      :ensure t)
#+end_src


* Visual Changes
** New Theme colors
Load personal custom theme created for my setup and a hook for
fontify to give selection color if wanted(useful for customization
and setting up the theme).
#+begin_src emacs-lisp
  (load-theme 'User_Dark t)
  ;; add in some code to check if this is already in the .emacs.d folder.
  ;; if not, copy over from themes
  (add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src


* Quality of life changes
** Vertico
Vertico package for vertical buffer during completions
#+begin_src emacs-lisp
    (use-package vertico
      :ensure t
      :init
	(vertico-mode))
#+end_src

** Orderless
A mod for Vertico to allow searching by any string instead of by starting string
#+begin_src emacs-lisp
      (use-package orderless
	:ensure t
	:init 
      (setq completion-styles '(orderless)))
#+end_src

** Rainbow mode stuff
Modifications for using rainbow delimiters. Makes navigating elisp code much easier
#+begin_src emacs-lisp
    (use-package rainbow-mode
      :ensure t)

    (require 'rainbow-mode)
    (rainbow-mode 1)

    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(highlight-changes ((t (:underline (:color foreground-color :style wave) :weight bold))))
     '(highlight-changes-delete ((t nil)))
     '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "blue"))))
     '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "yellow"))))
     '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "green"))))
     '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "white"))))
     '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "cyan"))))
     '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-mismatched-face ((t (:inherit rainbow-delimiters-base-face :foreground "red")))))
  (rainbow-mode t)

  (use-package rainbow-delimiters
    :ensure t)
  (require 'rainbow-delimiters)
  (rainbow-delimiters-mode 1)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  
#+end_src

** Marginalia
A simple package that allows for a string of helpful text to be added alongside
the different commands that you can use in emacs.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t)
    (require 'marginalia)
    (marginalia-mode)
#+end_src
    
** Line numbers and modes
Adds in line numbers for the file using a relative position
#+begin_src emacs-lisp
  (require 'display-line-numbers)
    (global-display-line-numbers-mode 'relative)
    (menu-bar-display-line-numbers-mode 'relative)
    (global-visual-line-mode t)
#+end_src

** Which Key Mode
A helpful package that allows for a buffer to appear with hotkey commands for the
current mode.
#+begin_src emacs-lisp
    (use-package which-key
      :ensure t)
    (require 'which-key)
    (which-key-mode t)
#+end_src

** Various changes
Some simple quality of life things for me. 
#+begin_src emacs-lisp
  ;; get rid of unwanted pieces

  ;;(scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; set auto reload with auto revert 
  (auto-revert-mode 1)
  ;; set save place mode for all files
  (save-place-mode 1)
  ;; save history for all buffers
  (savehist-mode 1)
  
#+end_src

** Origami mode
#+begin_src emacs-lisp
  (use-package origami
    :ensure t)
  (global-origami-mode t)
#+end_src

#+RESULTS:


* Autocomplete Stuff
** AC package
ac package for autocompletion in various modes. still needs some work
#+begin_src emacs-lisp
    ;; start auto-complete package
  (use-package auto-complete
    :ensure t)
    (require 'auto-complete-config)
    (ac-config-default)
#+end_src

** YAS(yasnippet)
Yasnippet configuration for using snippets in code. Using in programming
mode since that is the most convenient.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (require 'yasnippet)
    (add-to-list 'load-path
		 "~/.emacs.d/yasnippet")
    (add-to-list 'load-path
		 "~/.emacs.d/snippets")
    (yas/initialize)
    (yas-global-mode 1)
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
#+end_src

** Example block with results (View Raw to see org text)
Example of a block with results outputted. change keyword after
result to be any of the following:
*** Collection
- value
- output
*** Type
- table
- vector
- list
- scalar
- verbatim
- file
*** Format
- code
- drawer
- html
- latex
- link
- graphics
- org
- pp
- raw
*** Handling
- replace
- silent
- none
- append
- prepend

*** Example Block
#+begin_src C :results output
printf("Hello %s!!","world");
#+end_src



* GUI Specific
** EXWM
Window manager for emacs. May be useful for tiling and controlling from
keyboard alone. Still need some changes on system to get it working with
WSL properly.
*** Next steps
  - Need to set up displays. currently does not load
    correctly and spans over all screens.
  - Need to find a method of partitioning the screens
    into their own respective areas.
  - look into randr for detecting and configuring the
    displays. 
#+begin_src emacs-lisp
    (use-package exwm
      :ensure t)
   ;; (require 'exwm)
   ;; (require 'exwm-config)
   ;; (exwm-config-example)
#+end_src










** If Gui mode
#+begin_src emacs-lisp
  (if (display-graphic-p)
      (add-to-list 'default-frame-alist '(fullscreen . maximized ))
    )

  (if (display-graphic-p)
      (load-theme 'manoj-dark)
    )

  (if (display-graphic-p)
  (set-frame-font "FiraCode Nerd Font-14" nil t)
  )


#+end_src

#+RESULTS:
