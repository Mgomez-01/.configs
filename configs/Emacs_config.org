#+title: Emacs Configuration file in org mode
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+latex_header: \mode<beamer>{\usetheme{Madrid}}

* TABLE OF CONTENTS :toc:
- [[#basic-configs][Basic Configs]]
  - [[#package-managers][Package Managers]]
  - [[#org-specific-changes][Org specific changes]]
  - [[#matlab][matlab]]
  - [[#automatic-tangling-of-config][Automatic Tangling of config]]
  - [[#magit-git-client][Magit Git Client]]
  - [[#debugging][Debugging]]
- [[#visual-changes][Visual Changes]]
  - [[#new-theme-colors][New Theme colors]]
  - [[#emojis][Emojis]]
  - [[#fonts][Fonts]]
- [[#quality-of-life-changes][Quality of life changes]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#origami-mode][Origami mode]]
  - [[#rainbow-mode-stuff][Rainbow mode stuff]]
  - [[#marginalia][Marginalia]]
  - [[#line-numbers-and-modes][Line numbers and modes]]
  - [[#which-key-mode][Which Key Mode]]
  - [[#various-changes][Various changes]]
  - [[#auctex-stuff][Auctex stuff]]
  - [[#latex-stuff][LaTeX stuff]]
  - [[#keybindings][Keybindings]]
  - [[#ssh][SSH]]
  - [[#visual-regex][Visual Regex]]
  - [[#directory-changes][Directory Changes]]
  - [[#generic-x][generic-x]]
- [[#autocomplete-stuff][Autocomplete Stuff]]
  - [[#ac-package][AC package]]
  - [[#lsp][lsp]]
  - [[#yasyasnippet][YAS(yasnippet)]]
  - [[#elpy-mode][elpy mode]]
  - [[#docker-stuff][docker stuff]]
  - [[#python-stuff][Python stuff]]
  - [[#jupyter-stuff][jupyter stuff]]
  - [[#example-block-with-results-view-raw-to-see-org-text][Example block with results (View Raw to see org text)]]
- [[#platform-io][Platform-IO]]
- [[#gui-specific][GUI Specific]]
  - [[#exwm][EXWM]]
  - [[#if-gui-mode][If Gui mode]]

* Basic Configs
** Package Managers
This contains all package manager code
#+begin_src emacs-lisp

  ;; adding in package archives
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  ;;(package-refresh-contents)

  (eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (require 'use-package))
#+end_src

#+RESULTS:
: use-package

** Org main with latex
#+begin_src emacs-lisp
  (use-package org
    :defer t
    :config
      ;; Add Org-Beamer support
  (require 'ox-beamer)
  (setq org-latex-to-pdf-process
	'("pdflatex -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -interaction nonstopmode -output-directory %o %f"))

    ;; Your org mode configuration
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("ml" . "src matlab :session *MATLAB* :results output"))
    (add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python :session python3 :results output"))
    (add-to-list 'org-structure-template-alist '("b" . "src bash"))
    (add-to-list 'org-structure-template-alist '("sc" . "src C :session gcc :results output"))

    ;; Org-Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C           . t)
       (emacs-lisp  . t)
       (latex       . t)
       (matlab      . t)
       (org         . t)
       (processing  . t)
       (python      . t)
       (jupyter     . t)
       (R           . t)
       (shell       . t)))

    (setq org-confirm-babel-evaluate nil)
    (setq org-support-shift-select t)

    ;; Org LaTeX settings
    (setq org-latex-packages-alist
	  '(("T1" "fontenc" t)
	    ("" "titling" t)
	    ("" "url" t)
	    ("" "amsmath,amsthm,amssymb" t)))

    (with-eval-after-load 'ox-latex
      (add-to-list 'org-latex-classes
		   '("exam"
		     "\\documentclass[a4paper,11pt]{exam}"
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")
		     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
		     ;; Add more custom settings here
		     )))
    ;; More Org settings
    (setq org-toggle-inline-images t)
    (setq org-babel-C-compiler "/usr/bin/gcc")
    (setq org-babel-C++-compiler "/usr/bin/g++")
    (setq org-startup-with-inline-images t)
    (setq org-latex-images-centered t)
    )

  (use-package texfrag
    :defer t
    :config
    ;; Texfrag settings
    (define-key texfrag-mode-map (kbd "C-c C-x C-l") 'texfrag-show-fragments)
    (define-key texfrag-mode-map (kbd "C-c C-x C-k") 'texfrag-clear-fragments)
    )

  ;; Function to update Org date on save
  (defun update-org-date-on-save ()
    "Update the #+DATE: line in an Org file when it is saved."
    (when (eq major-mode 'org-mode)
      (save-excursion
	(goto-char (point-min))
	(when (re-search-forward "^#\\+DATE:.*$" nil t)
	  (replace-match (concat "#+DATE: " (format-time-string "%Y-%m-%d %H:%M:%S")))))))

  (add-hook 'before-save-hook 'update-org-date-on-save)

  ;; Other packages and settings
  (use-package org-modern
    :ensure t
    :config
    ;; Define the key binding in the org-mode-map
    (define-key org-mode-map (kbd "C-c a") 'insert-export-latex-from-example)
    (define-key org-mode-map (kbd "C-c o") 'my-org-export-to-pdf-and-run-pdflatex)
    )

  (use-package org-superstar :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (add-to-list 'load-path "~/.emacs.d/org-superstar/")

  (defun my-org-export-to-pdf-and-run-pdflatex ()
    "Export current Org file to PDF, then run pdflatex on the resulting LaTeX file, with error handling."
    (message "Starting process of export for my-org-export-to-pdf-and-run-pdflatex")
    (interactive)
    (let* ((org-file (buffer-file-name))
	   (base-file (file-name-sans-extension org-file))
	   (tex-file (concat base-file ".tex"))
	   (pdf-file (concat base-file ".pdf"))
	   (output-buffer "*Shell Command Output*")) ;; Define output-buffer here)

      ;; Step 1: Export to PDF (which also generates the .tex file)
      (condition-case err
	  (org-latex-export-to-pdf)
	(error (message "Export to PDF failed: %s" err) (return-from my-org-export-to-pdf-and-run-pdflatex)))
      ;; Step 2: Check if the .tex file exists, then run pdflatex on it
      (if (file-exists-p tex-file)
	  (progn
	    (message "Running pdflatex on %s" tex-file)
	    (shell-command (format "pdflatex -interaction=nonstopmode %s" (shell-quote-argument tex-file)))
	    ;; Optional: Run pdflatex a second time if needed
	    (shell-command (format "pdflatex -interaction=nonstopmode %s" (shell-quote-argument tex-file)))
	    ;; Step 3: Check if the PDF was successfully generated
	    (if (file-exists-p pdf-file)
		(progn
		  (message "PDF generated successfully: %s" pdf-file)
		  (when (get-buffer output-buffer)
		    (bury-buffer output-buffer)
		    (delete-window (get-buffer-window output-buffer))))
	      (message "PDF generation failed. Check the .log file for errors.")))
	(message "LaTeX file was not generated: %s" tex-file))))


  (defun insert-export-latex-from-example ()
    "Copy content from a specified region between '#+begin_example' and '#+end_example' and insert it into a LaTeX export block."
    (interactive)
    ;; Search backward for the beginning tag
    (search-backward "#+begin_example")
    (next-line) ; Move to the beginning of the content
    (beginning-of-line)
    ;; Mark the beginning of the content
    (set-mark (point))
    ;; Search forward for the end tag
    (search-forward "#+end_example")
    (previous-line) ; Adjust to end at the last line of content
    (end-of-line)
    ;; Copy the region
    (kill-ring-save (mark) (point))
    ;; Move to the insertion point
    (search-forward "#+end_example")
    (newline)
    ;; Insert the LaTeX block with the copied content
    (insert "\n\n#+begin_export latex\n\\[\n\\subsubsection{output of __ results}\n\\begin{lstlisting}[language=Singular]\n")
    (yank)
    (insert "\n\\end{lstlisting}\n\\]\n#+end_export\n")
    ;; Clean up the mark
    (deactivate-mark))
#+end_src

#+RESULTS:
: insert-export-latex-from-example


** matlab
#+begin_src emacs-lisp
    (setq matlab-shell-command "/usr/local/MATLAB/R2023a/bin/matlab")
   (require 'matlab)
     (add-hook 'matlab-mode-hook
   	    (lambda ()
   	      (define-key matlab-mode-map (kbd "M-<up>") 'elpy-nav-move-line-or-region-up)
   	      (define-key matlab-mode-map (kbd "M-<down>") 'elpy-nav-move-line-or-region-down)))
#+end_src

** Automatic Tangling of config
Exactly as it sounds. Tangles the config to init.el for loading in at Emacs startup
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.config/.configs/configs/Emacs_config.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )

  (defun efs/org-babel-tangle-bashfunctions ()
    (when
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.config/.configs/configs/bash_configs/.bash_functions.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )

  (defun efs/org-babel-tangle-bashaliases ()
    ;;(message "filename: %s" buffer-file-name)
    (when
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.config/.configs/configs/bash_configs/.bash_aliases.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )

  (defun efs/org-babel-tangle-bashrc ()
    (when
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.config/.configs/configs/bash_configs/.laptop_bashrc.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-bashfunctions)))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-bashaliases)))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-bashrc)))

  (add-hook 'org-mode-hook
	    (lambda ()
	      (define-key org-mode-map (kbd "M-<up>") 'elpy-nav-move-line-or-region-up)
	      (define-key org-mode-map (kbd "M-<down>") 'elpy-nav-move-line-or-region-down)))
#+end_src

#+RESULTS:
| (lambda nil (define-key org-mode-map (kbd M-<up>) 'elpy-nav-move-line-or-region-up) (define-key org-mode-map (kbd M-<down>) 'elpy-nav-move-line-or-region-down)) | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-bashrc)) | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-bashaliases)) | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-bashfunctions)) | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | (lambda nil (org-superstar-mode 1)) | org-tempo-setup | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Magit Git Client
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

#+RESULTS:

** Debugging
#+begin_src emacs-lisp
  ;(setq debug-on-error t)
#+end_src



* Visual Changes
** New Theme colors
Load personal custom theme created for my setup and a hook for
fontify to give selection color if wanted(useful for customization
and setting up the theme).
#+begin_src emacs-lisp

  (defun my/load-theme-according-to-environment ()
    "Load a different theme based on the current environment (terminal or GUI)."
    (if (display-graphic-p)
	;; Load theme for GUI Emacs.
	(progn
	  (load-theme 'tango-dark t)
	  (set-frame-parameter (selected-frame) 'alpha '(85 80))
	  (add-to-list 'default-frame-alist '(alpha 85 80)))
      ;; Load theme for terminal Emacs.
      (load-theme 'User_Dark t)))


    ;; Call the function to apply the theme.
    (my/load-theme-according-to-environment)

    ;; For emacsclient, add a hook to apply the theme every time a new frame is created.
    (add-hook 'after-make-frame-functions
	      (lambda (frame)
		(select-frame frame)
		(my/load-theme-according-to-environment)))



    ;;(load-theme 'User_Dark t)
    ;; add in some code to check if this is already in the .emacs.d folder.
    ;; if not, copy over from themes
    (add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src

#+RESULTS:
| info-colors-fontify-node |

** Emojis
#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
  (when (member "Segoe UI Emoji" (font-family-list))
    (set-fontset-font
   t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
#+end_src

#+RESULTS:


** Fonts
#+begin_src emacs-lisp
  (use-package ligature
    :load-path ""
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode
			  '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
			    ;; =:= =!=
			    ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
			    ;; ;; ;;;
			    (";" (rx (+ ";")))
			    ;; && &&&
			    ("&" (rx (+ "&")))
			    ;; !! !!! !. !: !!. != !== !~
			    ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
			    ;; ?? ??? ?:  ?=  ?.
			    ("?" (rx (or ":" "=" "\." (+ "?"))))
			    ;; %% %%%
			    ("%" (rx (+ "%")))
			    ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
			    ;; |->>-||-<<-| |- |== ||=||
			    ;; |==>>==<<==<=>==//==/=!==:===>
			    ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
					    "-" "=" ))))
			    ;; \\ \\\ \/
			    ("\\" (rx (or "/" (+ "\\"))))
			    ;; ++ +++ ++++ +>
			    ("+" (rx (or ">" (+ "+"))))
			    ;; :: ::: :::: :> :< := :// ::=
			    (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
			    ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
			    ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
					    "="))))
			    ;; .. ... .... .= .- .? ..= ..<
			    ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
			    ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
			    ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
			    ;; *> */ *)  ** *** ****
			    ("*" (rx (or ">" "/" ")" (+ "*"))))
			    ;; www wwww
			    ("w" (rx (+ "w")))
			    ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
			    ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
			    ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
			    ;; << <<< <<<<
			    ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
					    "-"  "/" "|" "="))))
			    ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
			    ;; >> >>> >>>>
			    (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
			    ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
			    ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
					 (+ "#"))))
			    ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
			    ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
			    ;; __ ___ ____ _|_ __|____|_
			    ("_" (rx (+ (or "_" "|"))))
			    ;; Fira code: 0xFF 0x12
			    ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
			    ;; Fira code:
			    "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
			    ;; The few not covered by the regexps.
			    "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    )
    (global-ligature-mode t)
#+end_src

#+RESULTS:
: t


* Quality of life changes
** Vertico
Vertico package for vertical buffer during completions
#+begin_src emacs-lisp
    (use-package vertico
      :ensure t
      :init
	(vertico-mode))
#+end_src

#+RESULTS:

** Orderless
A mod for Vertico to allow searching by any string instead of by starting string
#+begin_src emacs-lisp
      (use-package orderless
	:ensure t
	:init 
      (setq completion-styles '(orderless)))
#+end_src

#+RESULTS:

** Origami mode
#+begin_src emacs-lisp
  (use-package origami
    :ensure t)
  (global-origami-mode t)
#+end_src

#+RESULTS:
: t


** Rainbow mode stuff
Modifications for using rainbow delimiters. Makes navigating elisp code much easier
#+begin_src emacs-lisp
    (use-package rainbow-mode
      :ensure t)

    (require 'rainbow-mode)
    (rainbow-mode 1)

    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(highlight-changes ((t (:underline (:color foreground-color :style wave) :weight bold))))
     '(highlight-changes-delete ((t nil)))
     '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "blue"))))
     '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "yellow"))))
     '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "green"))))
     '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "white"))))
     '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "cyan"))))
     '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-mismatched-face ((t (:inherit rainbow-delimiters-base-face :foreground "red")))))
  (rainbow-mode t)

  (use-package rainbow-delimiters
    :ensure t)
  (require 'rainbow-delimiters)
  (rainbow-delimiters-mode 1)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  
#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

** Marginalia
A simple package that allows for a string of helpful text to be added alongside
the different commands that you can use in emacs.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t)
    (require 'marginalia)
    (marginalia-mode)
#+end_src

#+RESULTS:
: t
    
** Line numbers and modes
Adds in line numbers for the file using a relative position
#+begin_src emacs-lisp
  (require 'display-line-numbers)
    (global-display-line-numbers-mode 'relative)
    (menu-bar-display-line-numbers-mode 'relative)
    (global-visual-line-mode t)
#+end_src

#+RESULTS:
: t

** Which Key Mode
A helpful package that allows for a buffer to appear with hotkey commands for the
current mode.
#+begin_src emacs-lisp
    (use-package which-key
      :ensure t)
    (require 'which-key)
    (which-key-mode t)
#+end_src

#+RESULTS:
: t

** Various changes
Some simple quality of life things for me. 
#+begin_src emacs-lisp
  ;; get rid of unwanted pieces
  (setq scroll-step 1
	scroll-margin 1
	scroll-conservatively 10000
	scroll-preserve-screen-position 1
	)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; set auto reload with auto revert 
  (global-auto-revert-mode 1)
  ;; set save place mode for all files
  (save-place-mode 1)
  ;; save history for all buffers
  (savehist-mode 1)

#+end_src

#+RESULTS:
: t


** Auctex stuff
#+begin_src emacs-lisp
    (use-package tex
      :ensure auctex
      :hook (LaTeX-mode . turn-on-reftex)
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (setq reftex-plug-into-AUCTeX t)
      (add-hook 'LaTeX-mode-hook 'visual-line-mode)
      (add-hook 'LaTeX-mode-hook 'flyspell-mode)
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t)
      (TeX-global-PDF-mode t) ;; PDF mode enable, not plain
      (setq TeX-source-correlate-method 'synctex)
      (setq TeX-source-correlate-start-server t)
      ;; Add keybindings
      (add-hook 'LaTeX-mode-hook
		(lambda ()
		  (define-key LaTeX-mode-map (kbd "C-c C-g") 'quick-xelatex)
		  (define-key LaTeX-mode-map (kbd "C-c C-f") 'finalize-xelatex)
		  (define-key LaTeX-mode-map (kbd "M-<up>") 'elpy-nav-move-line-or-region-up)
		  (define-key LaTeX-mode-map (kbd "M-<down>") 'elpy-nav-move-line-or-region-down))))
#+end_src 

#+RESULTS:
| (lambda nil (define-key LaTeX-mode-map (kbd C-c C-g) 'quick-xelatex) (define-key LaTeX-mode-map (kbd C-c C-f) 'finalize-xelatex) (define-key LaTeX-mode-map (kbd M-<up>) 'elpy-nav-move-line-or-region-up) (define-key LaTeX-mode-map (kbd M-<down>) 'elpy-nav-move-line-or-region-down)) | turn-on-reftex | LaTeX-math-mode | flyspell-mode | visual-line-mode |


** LaTeX stuff
version without the debugging
  "Run xelatex on main.tex whenever a TeX file is saved."
  (when (string-match "\\.tex\\'" buffer-file-name)
    (let* ((bufname (format "*xelatex-%s*" (file-name-nondirectory buffer-file-name)))
           (proc (get-buffer-process bufname)))
      (when proc
        (delete-process proc))
      (start-process "xelatex" bufname "xelatex" "main.tex"))))
#+begin_src emacs-lisp
  (defun run-xelatex-on-save ()
    "Run xelatex on main.tex whenever a TeX file is saved."
    (message "Checking if hook should run...")  ; Debug message
    (when (string-match "\\.tex\\'" buffer-file-name)
      (message "Running xelatex...")  ; Debug message
      (let* ((bufname (format "*xelatex-%s*" (file-name-nondirectory buffer-file-name)))
	     (proc (get-buffer-process bufname)))
	(when proc
	  (message "Terminating existing xelatex process...")  ; Debug message
	  (delete-process proc))
	(message "Starting new xelatex process...")  ; Debug message
	(start-process "xelatex" bufname "xelatex" "main.tex")
	(message "xelatex process started."))))  ; Debug message

  (defun quick-xelatex ()
    "Quickly run XeLaTeX to update the PDF."
    (interactive)
    (TeX-command "LaTeX" 'TeX-master-file -1))

  (defun finalize-xelatex ()
    "Run XeLaTeX, BibTeX, and XeLaTeX twice more to finalize the document."
    (interactive)
    (let ((master (TeX-master-file)))
      (TeX-save-document master)
      (TeX-command-sequence '("LaTeX" "BibTeX" "LaTeX" "LaTeX") t)))

  ;; (add-hook 'TeX-mode-hook
  ;; 	  (lambda ()
  ;; 	    (define-key LaTeX-mode-map (kbd "C-c C-g") 'quick-xelatex)
  ;; 	    (define-key LaTeX-mode-map (kbd "C-c C-f") 'finalize-xelatex)))

  (add-hook 'LaTeX-mode-hook
	    (lambda ()
	      (add-hook 'after-save-hook 'run-xelatex-on-save nil 'make-it-local)))
#+end_src

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook 'run-xelatex-on-save nil 'make-it-local)) | (lambda nil (define-key LaTeX-mode-map (kbd C-c C-g) 'quick-xelatex) (define-key LaTeX-mode-map (kbd C-c C-f) 'finalize-xelatex) (define-key LaTeX-mode-map (kbd M-<up>) 'elpy-nav-move-line-or-region-up) (define-key LaTeX-mode-map (kbd M-<down>) 'elpy-nav-move-line-or-region-down)) | turn-on-reftex | LaTeX-math-mode | flyspell-mode | visual-line-mode |


** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x <C-right>") 'next-multiframe-window)
  (global-set-key (kbd "C-x <C-left>") 'next-multiframe-window)
  (global-set-key (kbd "M-[ M-[") 'origami-open-node)
  (global-set-key (kbd "M-] M-]") 'origami-close-node)
#+end_src

#+RESULTS:
: origami-close-node

** SSH
#+begin_src emacs-lisp
  (defun cade ()
    (interactive)
    (dired "/ssh:u1318856@lab1-13.eng.utah.edu:~/"))

  (defun docsServer ()
    (interactive)
    (dired "/ssh:root@160.238.36.160:/"))

  (defun home_throne ()
    (interactive)
    (dired "/ssh:speedy@speedzie.homeThrone#42069:~/"))
#+end_src

#+RESULTS:
: home_throne

** Visual Regex
#+begin_src emacs-lisp
  (require 'visual-regexp)
  (define-key global-map (kbd "C-c r") 'vr/replace)
  (define-key global-map (kbd "C-c q") 'vr/query-replace)
  ;; if you use multiple-cursors, this is for you:
  (define-key global-map (kbd "C-c m") 'vr/mc-mark)
#+end_src

#+RESULTS:
: vr/mc-mark

** Directory Changes
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.backups/emacs-backups")))
#+end_src

#+RESULTS:
: ((. . ~/.backups/emacs-backups))


** generic-x
#+begin_src emacs-lisp
 (require 'generic-x)
#+end_src

#+RESULTS:
: generic-x


* Autocomplete Stuff
** AC package
ac package for autocompletion in various modes. still needs some work
#+begin_src emacs-lisp
  ;; start auto-complete package

  (use-package auto-complete
    :ensure t)
  (use-package ac-etags
    :ensure t
    :after auto-complete
    :config
    (progn
      (ac-etags-setup)
      (setq ac-etags-requires 1)
      (add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)))
     (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(ac-etags-requires 1)
     '(custom-safe-themes
       '("af5e14845791d2baaa7ccdf455850527b963a991fa3e7a101ebf280645f30cc2" default))
     '(dir-treeview-show-in-side-window t))
    (require 'auto-complete-config)
    (ac-config-default)
    (use-package auto-complete-clang)
    (setq ac-clang-flags
	  (append '("-std=c++11")
		  (mapcar (lambda (item) (concat "-I" item))
			  (split-string
			   "
       /usr/include/c++/x.x
       /usr/include/x86_64-linux-gnu/c++/x.x
       /usr/include/c++/x.x/backward
       /usr/lib/gcc/x86_64-linux-gnu/x.x/include
       /usr/local/include
       /usr/include/x86_64-linux-gnu
       /usr/include
      "))))
    (setq ac-quick-help-delay 1)

  (defun my-ac-config ()
    (setq-default ac-sources '(ac-source-abbrev
			       ac-source-dictionary
			       ac-source-words-in-same-mode-buffers
			       ))
    (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
    (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
    (add-hook 'c-mode-common-hook 'my/c-mode-common-hook)
    (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
    (add-hook 'css-mode-hook 'ac-css-mode-setup)
    (add-hook 'auto-complete-mode-hook 'ac-common-setup)
    (global-auto-complete-mode t))
  (defun my-ac-cc-mode-setup ()
    (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
  (add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)

  ;; (setq lsp-clients-clangd-executable "/usr/bin/clangd")
  ;; (setq lsp-clients-clangd-args '("--log=verbose" ...))
  ;; (with-eval-after-load 'flycheck
  ;; (add-to-list 'flycheck-checkers 'lsp))
  ;; (setq lsp-enabled-clients '(clangd))
  ;; (with-eval-after-load 'lsp-mode
  ;; (add-to-list 'lsp-enabled-clients 'clangd))
  (add-hook 'c-mode-common-hook
	    (lambda ()
	      (local-set-key (kbd "M-<up>") 'elpy-nav-move-line-or-region-up)
	      (local-set-key (kbd "M-<down>") 'elpy-nav-move-line-or-region-down)))
#+end_src

#+RESULTS:
| (lambda nil (local-set-key (kbd M-<up>) 'elpy-nav-move-line-or-region-up) (local-set-key (kbd M-<down>) 'elpy-nav-move-line-or-region-down)) | ac-cc-mode-setup | my-ac-cc-mode-setup |


** lsp
#+begin_src emacs-lisp
    ;; Existing LSP and CMake setup
    (use-package lsp-ui)
    (use-package lsp-mode
      :config
      (setenv "LIBRARY_PATH" "/home/speedy/2022/altair/feko/api/winprop/bin/")
      (setenv "INCLUDE_PATH" "/home/speedy/2022/altair/feko/api/winprop/source/")) 
    (require 'lsp-mode)

    (add-to-list 'lsp-language-id-configuration '(cmake-mode . "cmake"))

    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "cmake-language-server")
		      :major-modes '(cmake-mode)
		      :server-id 'cmake-ls))
    (add-hook 'cmake-mode-hook #'lsp-deferred)

    ;; Additional setup for C/C++ with clangd
    (add-hook 'c-mode-hook #'lsp-deferred)
    (add-hook 'c++-mode-hook #'lsp-deferred)

    ;; Clangd configuration (assuming clangd is in your PATH)
    (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))

    ;; Company Mode for auto-completion (if not already set up)
    (use-package company
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 1)
      (add-hook 'after-init-hook 'global-company-mode))

    ;; Company LSP for LSP-driven auto-completions (if not already set up)
    (use-package company-lsp
      :commands company-lsp)
#+end_src

#+RESULTS:

** YAS(yasnippet)
Yasnippet configuration for using snippets in code. Using in programming
mode since that is the most convenient.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (require 'yasnippet)
    (add-to-list 'load-path
		 "~/.emacs.d/yasnippet")
    (add-to-list 'load-path
		 "~/.emacs.d/snippets")
    (yas/initialize)
    (yas-global-mode 1)
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
#+end_src

#+RESULTS:
| yas-minor-mode | rainbow-delimiters-mode |

 
** elpy mode
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
    (require 'elpy)
  (setq elpy-modules (delq 'elpy-module-eldoc elpy-modules))

#+end_src

#+RESULTS:
| elpy-module-sane-defaults | elpy-module-company | elpy-module-flymake | elpy-module-highlight-indentation | elpy-module-pyvenv | elpy-module-yasnippet | elpy-module-django |

** docker stuff
#+begin_src emacs-lisp :results none
  (use-package dockerfile-mode
    :ensure t
    :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src

** Python stuff
#+begin_src emacs-lisp
  (use-package jupyter
    :ensure t )
  (setq jupyter-command "/usr/bin/jupyter")
#+end_src

#+RESULTS:
: /usr/bin/jupyter

** jupyter stuff
#+begin_src jupyter-python :session python3 :results output
import numpy
#+end_src

** Example block with results (View Raw to see org text)
Example of a block with results outputted. change keyword after
result to be any of the following:
*** Collection
- value
- output
*** Type
- table
- vector
- list
- scalar
- verbatim
- file
*** Format
- code
- drawer
- html
- latex
- link
- graphics
- org
- pp
- raw
*** Handling
- replace
- silent
- none
- append
- prepend

*** Example Block
#+begin_src C :results output
printf("Hello %s!!","world");
#+end_src




* Platform-IO
#+begin_src emacs-lisp
  ;; emacs-lisp
(use-package irony-eldoc
  :ensure t)
(use-package company-irony
  :ensure t)
(use-package platformio-mode
  :ensure t)
;; edit ino files with adruino mode.
(add-to-list 'auto-mode-alist '("\\.ino$" . arduino-mode))
;; Enable irony for all c++ files, and platformio-mode only
;; when needed (platformio.ini present in project root).
(add-hook 'c++-mode-hook (lambda ()
			   (irony-mode)
			   (irony-eldoc)
			   (platformio-conditionally-enable)))

(add-hook 'c-mode-hook (lambda ()
			 (irony-mode)
			 (irony-eldoc)
			 (platformio-conditionally-enable)))

;; Use irony's completion functions.
(add-hook 'irony-mode-hook
	  (lambda ()
	    (define-key irony-mode-map [remap completion-at-point]
	      'irony-completion-at-point-async)

	    (define-key irony-mode-map [remap complete-symbol]
	      'irony-completion-at-point-async)

	    (irony-cdb-autosetup-compile-options)))

(defun my-setup-company-backend ()
  "Dynamically set the company backend."
  (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
      (progn
	;; Use company-lsp or company-capf for C/C++ modes
	(setq-local company-backends '((company-lsp :with company-yasnippet)
				       company-capf
				       company-files))
	(message "Set company backends for C/C++ mode"))
    (progn
      ;; Use default company backends for other modes
      (setq-local company-backends '(company-irony company-capf company-files))
      (message "Set default company backends"))))

;; Add this function to the hooks for the modes where you want to set up company backends
(add-hook 'c-mode-hook 'my-setup-company-backend)
(add-hook 'c++-mode-hook 'my-setup-company-backend)
(add-hook 'python-mode-hook 'my-setup-company-backend)

(defun my-disable-ac-if-company-active ()
  "Disable auto-complete if company-mode is active."
  (message "Checking if auto-complete and company-mode are both active...")
  (when (and (bound-and-true-p company-mode)
	     (bound-and-true-p auto-complete-mode))
    (message "Both are active. Disabling auto-complete-mode.")
    (auto-complete-mode -1)))


;; Add this function to the hooks where both company-mode and auto-complete could be active
(add-hook 'c-mode-hook 'my-disable-ac-if-company-active)
(add-hook 'c++-mode-hook 'my-disable-ac-if-company-active)
(add-hook 'cmake-mode-hook 'my-disable-ac-if-company-active)
(add-hook 'prog-mode-hook 'my-disable-ac-if-company-active)

#+end_src

#+RESULTS:
| my-disable-ac-if-company-active | yas-minor-mode | rainbow-delimiters-mode |

The code below may not really be necessary for the ASUS laptop. check if there are any conflicts if adding this
(use-package company-manually
    :load-path "/home/speedy/.emacs.d/elpa/company-manually-20200721.1903/")

#+RESULTS:


* GUI Specific
** EXWM
Window manager for emacs. May be useful for tiling and controlling from
keyboard alone. Still need some changes on system to get it working with
WSL properly.
*** Next steps
  - Need to set up displays. currently does not load
    correctly and spans over all screens.
  - Need to find a method of partitioning the screens
    into their own respective areas.
  - look into randr for detecting and configuring the
    displays. 
#+begin_src emacs-lisp
    (use-package exwm
      :ensure t)
   ;; (require 'exwm)
   ;; (require 'exwm-config)
   ;; (exwm-config-example)
#+end_src
 
** If Gui mode
#+begin_src emacs-lisp
  (if (display-graphic-p)
      (add-to-list 'default-frame-alist '(fullscreen . maximized ))
    )

  (if (display-graphic-p)
      (load-theme 'manoj-dark)
    )

  ;;(if (display-graphic-p)
  ;;(set-frame-font "FiraCode Nerd Font-14" nil t)
  ;;)


#+end_src

#+RESULTS:
: t
 

#+begin_src emacs-lisp
  ;; (defun org-babel-post-process-ansi-colors ()
  ;;   (let ((params (nth 2 (org-babel-get-src-block-info))))
  ;;     (when (assoc :with_ansi_color params)
  ;;       (goto-char (point-min))
  ;;       (while (re-search-forward "\033\\[37m" nil t)
  ;;         (replace-match "#+BEGIN_VERSE\n"))
  ;;       (goto-char (point-min))
  ;;       (while (re-search-forward "\033\\[0m" nil t)
  ;;         (replace-match "\n#+END_VERSE")))))

  ;; (add-to-list 'org-babel-after-execute-hook 'org-babel-post-process-ansi-colors)
#+end_src

#+RESULTS:


** custom modes
#+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/.custom/")
    (load "cnf-mode.el")
    (add-to-list 'auto-mode-alist '("\\.cnf\\'" . cnf-mode))  
    (load "blif-mode.el")
    (add-to-list 'auto-mode-alist '("\\.blif\\'" . blif-mode))
    (load "feko-mode.el")
    (add-to-list 'auto-mode-alist '("\\.sing\\'" . singular-mode))
    (load "sing-mode.el")

    ;; hook for running singular immediately after saving the file
  (add-hook 'singular-mode-hook
	    (lambda ()
	      (add-hook 'after-save-hook
			(lambda ()
			  (let ((command (format "Singular %s" (shell-quote-argument (buffer-file-name)))))
			    (async-shell-command command))
			  ) nil 'local)))
#+end_src

#+RESULTS:
| lambda | nil | (add-hook 'after-save-hook (lambda nil (let ((command (format Singular %s (shell-quote-argument (buffer-file-name))))) (async-shell-command command))) nil 'local) |


** custom python def creator
#+begin_src emacs-lisp
  (defun generate-python-function ()
    (interactive)
    (let (function-name current-point)
      (save-excursion
      ;; Capture function name using regex search
      (if (or (re-search-backward "\\b\\([a-zA-Z0-9_]+\\)\\b" nil t)
	      (re-search-forward "\\b\\([a-zA-Z0-9_]+\\)\\b" nil t))
	  (setq function-name (match-string 1))
	(error "No valid function name at point"))))
	(goto-char (point-min))
      ;; Search for the last import statement followed by a blank line
      (if (re-search-forward "^import \\|^from .+ import " nil t)
	  (progn
	    (while (or (looking-at "^import \\|^from .+ import ")
		       (looking-at "^[ \t]*$"))
	      (forward-line))
	    (insert (format "\n\ndef %s():\n    pass\n" function-name)))
	(goto-char (point-max))
	(insert (format "\n\ndef %s():\n    pass\n" function-name))))
  (global-set-key (kbd "C-c g") 'generate-python-function)
  
#+end_src

#+RESULTS:
: generate-python-function


** exec-shell-from-path
#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src

** compile and fancy comp for python testing
#+begin_src emacs-lisp
(use-package compile
  :ensure nil
  :custom
  (compilation-scroll-output 'first-error)
  (compilation-always-kill t)
  (compilation-max-output-line-length nil)
  :hook (compilation-mode . hl-line-mode)
  :init
  ; from enberg on #emacs
  (add-hook 'compilation-finish-functions
            (lambda (buf str)
              (if (null (string-match ".*exited abnormally.*" str))
                  ;;no errors, make the compilation window go away in a few seconds
                  (progn
                    (run-at-time
                     "1 sec" nil 'delete-windows-on
                     (get-buffer-create "*compilation*"))
                    (message "No Compilation Errors!")))))

  )

(use-package fancy-compilation
  :ensure t
  :defer 3
  :config
  (fancy-compilation-mode)
  :custom
  (fancy-compilation-scroll-output 'first-error))

(use-package recompile-on-save
  :ensure t
  ;; Kill the buffer message that pops up after running advice on compile
  :hook (after-init . (lambda () (run-at-time 1 nil
     (lambda ()
        (when (get-buffer "*Compile-Log*")
           (kill-buffer "*Compile-Log*"))
        (delete-other-windows)))))
  :init
  (recompile-on-save-advice compile))
#+end_src
