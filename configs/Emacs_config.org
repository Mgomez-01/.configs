#+title: Emacs Configuration file in org mode
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+latex_header: \mode<beamer>{\usetheme{Madrid}}

* TABLE OF CONTENTS :toc:
- [[#basic-configs][Basic Configs]]
  - [[#package-managers][Package Managers]]
  - [[#org-specific-changes][Org specific changes]]
  - [[#automatic-tangling-of-config][Automatic Tangling of config]]
  - [[#magit-git-client][Magit Git Client]]
  - [[#debugging][Debugging]]
- [[#visual-changes][Visual Changes]]
  - [[#new-theme-colors][New Theme colors]]
  - [[#emojis][Emojis]]
  - [[#fonts][Fonts]]
- [[#quality-of-life-changes][Quality of life changes]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#origami-mode][Origami mode]]
  - [[#rainbow-mode-stuff][Rainbow mode stuff]]
  - [[#marginalia][Marginalia]]
  - [[#line-numbers-and-modes][Line numbers and modes]]
  - [[#which-key-mode][Which Key Mode]]
  - [[#various-changes][Various changes]]
  - [[#keybindings][Keybindings]]
  - [[#ssh][SSH]]
  - [[#visual-regex][Visual Regex]]
  - [[#directory-changes][Directory Changes]]
- [[#autocomplete-stuff][Autocomplete Stuff]]
  - [[#ac-package][AC package]]
  - [[#lsp][lsp]]
  - [[#yasyasnippet][YAS(yasnippet)]]
  - [[#elpy-mode][elpy mode]]
  - [[#docker-stuff][docker stuff]]
  - [[#python-stuff][Python stuff]]
  - [[#jupyter-stuff][jupyter stuff]]
  - [[#example-block-with-results-view-raw-to-see-org-text][Example block with results (View Raw to see org text)]]
- [[#gui-specific][GUI Specific]]
  - [[#exwm][EXWM]]
  - [[#if-gui-mode][If Gui mode]]

* Basic Configs
** Package Managers
This contains all package manager code
#+begin_src emacs-lisp

  ;; adding in package archives
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  ;;(package-refresh-contents)

  (eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (require 'use-package))
#+end_src

** Org specific changes
Org specific modifications to allow for simpler entry in configs and other
files.
#+begin_src emacs-lisp
  (use-package org
    :ensure t)
  (require 'org)
  ;; Line below is to allow quick templates to work.
  ;;Ex: <s <TAB> returns 
  ;;#+begin_src
  ;;
  ;;#+end_src

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;;(add-to-list 'org-structure-template-alist '("comm" . "COMMENT"))
  (add-to-list 'org-structure-template-alist '("ml" . "src matlab :session *MATLAB* :results 
    output"))
  (add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python :session python3 :results output"))
  (add-to-list 'org-structure-template-alist '("b" . "src bash"))
  (add-to-list 'org-structure-template-alist '("sc" . "src C :session gcc :results output"))

  (use-package org-modern
    :ensure t)
  ;; set up org babel languages for code blocks
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (C          . t)
     (emacs-lisp . t)
     (latex      . t)
     (matlab     . t)
     (org        . t)
     (processing . t)
     (python     . t)
     (jupyter    . t)
     (R          . t)
     (shell      . t)))
  (setq org-confirm-babel-evaluate nil)
  (setq org-support-shift-select t)

  (use-package org-superstar
      :ensure t)
  (require 'org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

  (add-to-list 'load-path "~/.emacs.d/org-superstar/")
  (toc-org-enable)
  (setq org-startup-with-inline-images t)
  (setq org-toggle-inline-images t)


#+end_src

#+RESULTS:
: t

** Automatic Tangling of config
Exactly as it sounds. Tangles the config to init.el for loading in at Emacs startup
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.config/.configs/configs/Emacs_config.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )

  (defun efs/org-babel-tangle-bashfunctions ()
    (when
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.config/.configs/configs/bash_configs/.bash_functions.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )
  
  (defun efs/org-babel-tangle-bashrc ()
    (when
	(string-equal
	 (buffer-file-name)
	 (expand-file-name "~/.config/.configs/configs/bash_configs/.laptop_bashrc.org"))
      (let
	  ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))
      )
    )

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-bashfunctions)))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-bashrc)))
#+end_src

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | (lambda nil (org-superstar-mode 1)) | jupyter-org-interaction-mode | org-tempo-setup | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Magit Git Client
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

** Debugging
#+begin_src emacs-lisp
  ;(setq debug-on-error t)
#+end_src



* Visual Changes
** New Theme colors
Load personal custom theme created for my setup and a hook for
fontify to give selection color if wanted(useful for customization
and setting up the theme).
#+begin_src emacs-lisp

  (defun my/load-theme-according-to-environment ()
      "Load a different theme based on the current environment (terminal or GUI)."
      (if (display-graphic-p)
	  ;; Load theme for GUI Emacs.
	  (load-theme 'tango-dark t)
	;; Load theme for terminal Emacs.
	(load-theme 'User_Dark t)))

    ;; Call the function to apply the theme.
    (my/load-theme-according-to-environment)

    ;; For emacsclient, add a hook to apply the theme every time a new frame is created.
    (add-hook 'after-make-frame-functions
	      (lambda (frame)
		(select-frame frame)
		(my/load-theme-according-to-environment)))



    ;;(load-theme 'User_Dark t)
    ;; add in some code to check if this is already in the .emacs.d folder.
    ;; if not, copy over from themes
    (add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src


** Emojis
#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
  (when (member "Segoe UI Emoji" (font-family-list))
    (set-fontset-font
   t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
#+end_src

#+RESULTS:

** Fonts
#+begin_src emacs-lisp
  (use-package ligature
    :load-path ""
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode
			  '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
			    ;; =:= =!=
			    ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
			    ;; ;; ;;;
			    (";" (rx (+ ";")))
			    ;; && &&&
			    ("&" (rx (+ "&")))
			    ;; !! !!! !. !: !!. != !== !~
			    ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
			    ;; ?? ??? ?:  ?=  ?.
			    ("?" (rx (or ":" "=" "\." (+ "?"))))
			    ;; %% %%%
			    ("%" (rx (+ "%")))
			    ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
			    ;; |->>-||-<<-| |- |== ||=||
			    ;; |==>>==<<==<=>==//==/=!==:===>
			    ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
					    "-" "=" ))))
			    ;; \\ \\\ \/
			    ("\\" (rx (or "/" (+ "\\"))))
			    ;; ++ +++ ++++ +>
			    ("+" (rx (or ">" (+ "+"))))
			    ;; :: ::: :::: :> :< := :// ::=
			    (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
			    ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
			    ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
					    "="))))
			    ;; .. ... .... .= .- .? ..= ..<
			    ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
			    ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
			    ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
			    ;; *> */ *)  ** *** ****
			    ("*" (rx (or ">" "/" ")" (+ "*"))))
			    ;; www wwww
			    ("w" (rx (+ "w")))
			    ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
			    ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
			    ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
			    ;; << <<< <<<<
			    ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
					    "-"  "/" "|" "="))))
			    ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
			    ;; >> >>> >>>>
			    (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
			    ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
			    ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
					 (+ "#"))))
			    ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
			    ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
			    ;; __ ___ ____ _|_ __|____|_
			    ("_" (rx (+ (or "_" "|"))))
			    ;; Fira code: 0xFF 0x12
			    ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
			    ;; Fira code:
			    "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
			    ;; The few not covered by the regexps.
			    "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    )
    (global-ligature-mode t)
#+end_src

#+RESULTS:
: t

* Quality of life changes
** Vertico
Vertico package for vertical buffer during completions
#+begin_src emacs-lisp
    (use-package vertico
      :ensure t
      :init
	(vertico-mode))
#+end_src

** Orderless
A mod for Vertico to allow searching by any string instead of by starting string
#+begin_src emacs-lisp
      (use-package orderless
	:ensure t
	:init 
      (setq completion-styles '(orderless)))
#+end_src


** Origami mode
#+begin_src emacs-lisp
  (use-package origami
    :ensure t)
  (global-origami-mode t)
#+end_src

#+RESULTS:

** Rainbow mode stuff
Modifications for using rainbow delimiters. Makes navigating elisp code much easier
#+begin_src emacs-lisp
    (use-package rainbow-mode
      :ensure t)

    (require 'rainbow-mode)
    (rainbow-mode 1)

    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(highlight-changes ((t (:underline (:color foreground-color :style wave) :weight bold))))
     '(highlight-changes-delete ((t nil)))
     '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "blue"))))
     '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "yellow"))))
     '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "green"))))
     '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "white"))))
     '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "cyan"))))
     '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "magenta"))))
     '(rainbow-delimiters-mismatched-face ((t (:inherit rainbow-delimiters-base-face :foreground "red")))))
  (rainbow-mode t)

  (use-package rainbow-delimiters
    :ensure t)
  (require 'rainbow-delimiters)
  (rainbow-delimiters-mode 1)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  
#+end_src

** Marginalia
A simple package that allows for a string of helpful text to be added alongside
the different commands that you can use in emacs.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t)
    (require 'marginalia)
    (marginalia-mode)
#+end_src
    
** Line numbers and modes
Adds in line numbers for the file using a relative position
#+begin_src emacs-lisp
  (require 'display-line-numbers)
    (global-display-line-numbers-mode 'relative)
    (menu-bar-display-line-numbers-mode 'relative)
    (global-visual-line-mode t)
#+end_src

** Which Key Mode
A helpful package that allows for a buffer to appear with hotkey commands for the
current mode.
#+begin_src emacs-lisp
    (use-package which-key
      :ensure t)
    (require 'which-key)
    (which-key-mode t)
#+end_src

** Various changes
Some simple quality of life things for me. 
#+begin_src emacs-lisp
  ;; get rid of unwanted pieces
  (setq scroll-step 1
	scroll-margin 1
	scroll-conservatively 10000
	scroll-preserve-screen-position 1
	)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; set auto reload with auto revert 
  (auto-revert-mode 1)
  ;; set save place mode for all files
  (save-place-mode 1)
  ;; save history for all buffers
  (savehist-mode 1)

#+end_src

#+RESULTS: 
: t

** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x <C-right>") 'next-multiframe-window)
  (global-set-key (kbd "C-x <C-left>") 'next-multiframe-window)
#+end_src

** SSH
#+begin_src emacs-lisp
  (defun cade ()
    (interactive)
    (dired "/ssh:u1318856@lab1-13.eng.utah.edu:~/"))

  (defun docsServer ()
    (interactive)
    (dired "/ssh:root@160.238.36.160:/"))

#+end_src

** Visual Regex
#+begin_src emacs-lisp
  (require 'visual-regexp)
  (define-key global-map (kbd "C-c r") 'vr/replace)
  (define-key global-map (kbd "C-c q") 'vr/query-replace)
  ;; if you use multiple-cursors, this is for you:
  (define-key global-map (kbd "C-c m") 'vr/mc-mark)
#+end_src
** Directory Changes
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.backups/emacs-backups")))
#+end_src

#+RESULTS:
: ((. . ~/.somedir/emacs-backups))

* Autocomplete Stuff
** AC package
ac package for autocompletion in various modes. still needs some work
#+begin_src emacs-lisp
    ;; start auto-complete package
  (use-package auto-complete
    :ensure t)
    (require 'auto-complete-config)
    (ac-config-default)
#+end_src

** lsp
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t)
  (require 'lsp-ui)
#+end_src

** YAS(yasnippet)
Yasnippet configuration for using snippets in code. Using in programming
mode since that is the most convenient.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (require 'yasnippet)
    (add-to-list 'load-path
		 "~/.emacs.d/yasnippet")
    (add-to-list 'load-path
		 "~/.emacs.d/snippets")
    (yas/initialize)
    (yas-global-mode 1)
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
#+end_src


** elpy mode
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
    (require 'elpy)
  (setq elpy-modules (delq 'elpy-module-eldoc elpy-modules))

#+end_src

** docker stuff
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src

** Python stuff
#+begin_src emacs-lisp
  (use-package jupyter
    :ensure t )
  (setq jupyter-command "/home/speedy/mambaforge/bin/jupyter")
#+end_src

** jupyter stuff
#+begin_src jupyter-python :session python3 :results output
import numpy
#+end_src

** Example block with results (View Raw to see org text)
Example of a block with results outputted. change keyword after
result to be any of the following:
*** Collection
- value
- output
*** Type
- table
- vector
- list
- scalar
- verbatim
- file
*** Format
- code
- drawer
- html
- latex
- link
- graphics
- org
- pp
- raw
*** Handling
- replace
- silent
- none
- append
- prepend

*** Example Block
#+begin_src C :results output
printf("Hello %s!!","world");
#+end_src



* GUI Specific
** EXWM
Window manager for emacs. May be useful for tiling and controlling from
keyboard alone. Still need some changes on system to get it working with
WSL properly.
*** Next steps
  - Need to set up displays. currently does not load
    correctly and spans over all screens.
  - Need to find a method of partitioning the screens
    into their own respective areas.
  - look into randr for detecting and configuring the
    displays. 
#+begin_src emacs-lisp
    (use-package exwm
      :ensure t)
   ;; (require 'exwm)
   ;; (require 'exwm-config)
   ;; (exwm-config-example)
#+end_src

** If Gui mode
#+begin_src emacs-lisp
  (if (display-graphic-p)
      (add-to-list 'default-frame-alist '(fullscreen . maximized ))
    )

  (if (display-graphic-p)
      (load-theme 'manoj-dark)
    )

  ;;(if (display-graphic-p)
  ;;(set-frame-font "FiraCode Nerd Font-14" nil t)
  ;;)


#+end_src
 
#+RESULTS:
